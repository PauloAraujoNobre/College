
ProjetoN1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080013c  0080013c  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000738  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000402  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027b  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 37       	cpi	r26, 0x78	; 120
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  9e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <envia_comando>:
	PORTB = dado;
	PORTC |= (0x01);
	PORTC &= ~(0x02);
	PORTC |= (0x04);
	_delay_ms(50);
	PORTC &= ~(0x04);
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	40 98       	cbi	0x08, 0	; 8
  aa:	41 98       	cbi	0x08, 1	; 8
  ac:	42 9a       	sbi	0x08, 2	; 8
  ae:	2f e7       	ldi	r18, 0x7F	; 127
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <envia_comando+0xe>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <envia_comando+0x18>
  be:	00 00       	nop
  c0:	42 98       	cbi	0x08, 2	; 8
  c2:	08 95       	ret

000000c4 <USART_Init>:
}

/* -------------------------------------------- SERIAL ----------------------------------------- */

void USART_Init(unsigned int ubrr){ 
	UBRR0H = (unsigned char)(ubrr>>8);
  c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  d8:	08 95       	ret

000000da <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	while ( !( UCSR0A & (1<<UDRE0)) );
  da:	e0 ec       	ldi	r30, 0xC0	; 192
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	95 ff       	sbrs	r25, 5
  e2:	fd cf       	rjmp	.-6      	; 0xde <USART_Transmit+0x4>
	UDR0 = data;
  e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e8:	08 95       	ret

000000ea <USART_putstring>:
}

void USART_putstring(char* StringPtr){
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	while(*StringPtr != 0){
  f0:	88 81       	ld	r24, Y
  f2:	88 23       	and	r24, r24
  f4:	31 f0       	breq	.+12     	; 0x102 <USART_putstring+0x18>
  f6:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*StringPtr++);  
  f8:	0e 94 6d 00 	call	0xda	; 0xda <USART_Transmit>
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR0 = data;
}

void USART_putstring(char* StringPtr){
	while(*StringPtr != 0){
  fc:	89 91       	ld	r24, Y+
  fe:	81 11       	cpse	r24, r1
 100:	fb cf       	rjmp	.-10     	; 0xf8 <USART_putstring+0xe>
		USART_Transmit(*StringPtr++);  
	}
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <__vector_13>:

int num[28];
int i = 0, flag = 1, count = 0;

ISR(TIMER1_OVF_vect)                              //interrupção do TIMER1
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	TCNT1 = 0xE17B;                                 // Renicia TIMER
 132:	8b e7       	ldi	r24, 0x7B	; 123
 134:	91 ee       	ldi	r25, 0xE1	; 225
 136:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 13a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	if (flag){
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 146:	89 2b       	or	r24, r25
 148:	71 f1       	breq	.+92     	; 0x1a6 <__vector_13+0x9e>
		if((PIND&(1<< 2))){
 14a:	4a 9b       	sbis	0x09, 2	; 9
 14c:	16 c0       	rjmp	.+44     	; 0x17a <__vector_13+0x72>
			USART_putstring("1");
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
			num[i] = 1;
 156:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <i>
 15a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <i+0x1>
 15e:	fc 01       	movw	r30, r24
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e0 5c       	subi	r30, 0xC0	; 192
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
			i++;
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <i+0x1>
 176:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <i>
		}
		
		if((PIND&(1<< 2)) == 0){
 17a:	4a 99       	sbic	0x09, 2	; 9
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <__vector_13+0x9e>
			USART_putstring("0");
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
			num[i] = 0;
 186:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <i>
 18a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <i+0x1>
 18e:	fc 01       	movw	r30, r24
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 5c       	subi	r30, 0xC0	; 192
 196:	fe 4f       	sbci	r31, 0xFE	; 254
 198:	11 82       	std	Z+1, r1	; 0x01
 19a:	10 82       	st	Z, r1
			i++;
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <i+0x1>
 1a2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <i>
		}
	}
	count++;
 1a6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 1aa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 1b4:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	
	if(count==28){
 1b8:	4c 97       	sbiw	r24, 0x1c	; 28
 1ba:	b1 f5       	brne	.+108    	; 0x228 <__vector_13+0x120>
		USART_Transmit(0x0d);
 1bc:	8d e0       	ldi	r24, 0x0D	; 13
 1be:	0e 94 6d 00 	call	0xda	; 0xda <USART_Transmit>
		USART_putstring("Remote RC-05 descodificada:");
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
		USART_Transmit(0x0d);
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	0e 94 6d 00 	call	0xda	; 0xda <USART_Transmit>
		for (int j = 0; j < i-1; j = j+2){
 1d0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <i>
 1d4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <i+0x1>
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	18 16       	cp	r1, r24
 1dc:	19 06       	cpc	r1, r25
 1de:	04 f5       	brge	.+64     	; 0x220 <__vector_13+0x118>
 1e0:	00 e4       	ldi	r16, 0x40	; 64
 1e2:	11 e0       	ldi	r17, 0x01	; 1
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
			if (num[j] == 1){
 1e8:	f8 01       	movw	r30, r16
 1ea:	80 81       	ld	r24, Z
 1ec:	91 81       	ldd	r25, Z+1	; 0x01
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	91 05       	cpc	r25, r1
 1f2:	29 f4       	brne	.+10     	; 0x1fe <__vector_13+0xf6>
				USART_putstring("0");
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <__vector_13+0x102>
			}
			else if (num[j] == 0){
 1fe:	89 2b       	or	r24, r25
 200:	21 f4       	brne	.+8      	; 0x20a <__vector_13+0x102>
				USART_putstring("1");
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
	
	if(count==28){
		USART_Transmit(0x0d);
		USART_putstring("Remote RC-05 descodificada:");
		USART_Transmit(0x0d);
		for (int j = 0; j < i-1; j = j+2){
 20a:	22 96       	adiw	r28, 0x02	; 2
 20c:	0c 5f       	subi	r16, 0xFC	; 252
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
 210:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <i>
 214:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <i+0x1>
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	c8 17       	cp	r28, r24
 21c:	d9 07       	cpc	r29, r25
 21e:	24 f3       	brlt	.-56     	; 0x1e8 <__vector_13+0xe0>
			}
			else if (num[j] == 0){
				USART_putstring("1");
			}
		}
		flag = 0;
 220:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 224:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	}
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <main>:
/* --------------------------------------------- LCD ------------------------------------------- */



int main(void){
	DDRD = 0xff;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	8a b9       	out	0x0a, r24	; 10
	
	// Configuração do timer1
	TCCR1A = 0;                        //confira timer para operação normal pinos OC1A e OC1B desconectados
 256:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;                        //limpa registrador
 25a:	e1 e8       	ldi	r30, 0x81	; 129
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS10)|(1 << CS12);   // configura prescaler para 1024: CS12 = 1 e CS10 = 1
 260:	80 81       	ld	r24, Z
 262:	85 60       	ori	r24, 0x05	; 5
 264:	80 83       	st	Z, r24

	TCNT1 = 0xE17B;                    // incia timer com valor para que estouro ocorra em 1 segundo
 266:	8b e7       	ldi	r24, 0x7B	; 123
 268:	91 ee       	ldi	r25, 0xE1	; 225
 26a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 26e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// 65536-(8MHz/1024)
	 
	TIMSK1 |= (1 << TOIE1);           // habilita a interrupção do TIMER1
 272:	ef e6       	ldi	r30, 0x6F	; 111
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	80 83       	st	Z, r24
	sei();
 27c:	78 94       	sei
	
	USART_Init(MYUBRR);
 27e:	83 e3       	ldi	r24, 0x33	; 51
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_Init>
    envia_comando(0x80);
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	0e 94 53 00 	call	0xa6	; 0xa6 <envia_comando>
	
	USART_putstring("Remote RC-05 codificado:");
 28c:	82 e2       	ldi	r24, 0x22	; 34
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 75 00 	call	0xea	; 0xea <USART_putstring>
	USART_Transmit(0x0d);
 294:	8d e0       	ldi	r24, 0x0D	; 13
 296:	0e 94 6d 00 	call	0xda	; 0xda <USART_Transmit>
 29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x48>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
